// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package pg

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (contents, user_id, post_id)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, contents, user_id, post_id
`

type CreateCommentParams struct {
	Contents string
	UserID   int32
	PostID   int32
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.Contents, arg.UserID, arg.PostID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Contents,
		&i.UserID,
		&i.PostID,
	)
	return i, err
}

const createFollower = `-- name: CreateFollower :one
INSERT INTO followers (leader_id, follower_id)
VALUES ($1, $2)
RETURNING id, created_at, leader_id, follower_id
`

type CreateFollowerParams struct {
	LeaderID   int32
	FollowerID int32
}

func (q *Queries) CreateFollower(ctx context.Context, arg CreateFollowerParams) (Follower, error) {
	row := q.db.QueryRowContext(ctx, createFollower, arg.LeaderID, arg.FollowerID)
	var i Follower
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LeaderID,
		&i.FollowerID,
	)
	return i, err
}

const createHashtag = `-- name: CreateHashtag :one
INSERT INTO hashtags (title)
VALUES ($1)
RETURNING id, created_at, title
`

func (q *Queries) CreateHashtag(ctx context.Context, title string) (Hashtag, error) {
	row := q.db.QueryRowContext(ctx, createHashtag, title)
	var i Hashtag
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Title)
	return i, err
}

const createLike = `-- name: CreateLike :one
INSERT INTO likes (user_id, post_id, comment_id)
VALUES ($1, $2, $3)
RETURNING id, created_at, user_id, post_id, comment_id
`

type CreateLikeParams struct {
	UserID    int32
	PostID    int32
	CommentID int32
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, createLike, arg.UserID, arg.PostID, arg.CommentID)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.PostID,
		&i.CommentID,
	)
	return i, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (url, caption, user_id)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, url, caption, lat, lng, user_id
`

type CreatePostParams struct {
	Url     string
	Caption string
	UserID  int32
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.Url, arg.Caption, arg.UserID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
		&i.Caption,
		&i.Lat,
		&i.Lng,
		&i.UserID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, bio, avatar, email, password)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, username, bio, avatar, email, password
`

type CreateUserParams struct {
	Username string
	Bio      string
	Avatar   string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Bio,
		arg.Avatar,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Bio,
		&i.Avatar,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :one
DELETE FROM comments
WHERE id = $1
RETURNING id, created_at, updated_at, contents, user_id, post_id
`

func (q *Queries) DeleteComment(ctx context.Context, id int32) (Comment, error) {
	row := q.db.QueryRowContext(ctx, deleteComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Contents,
		&i.UserID,
		&i.PostID,
	)
	return i, err
}

const deleteFollower = `-- name: DeleteFollower :one
DELETE FROM followers
WHERE id = $1
RETURNING id, created_at, leader_id, follower_id
`

func (q *Queries) DeleteFollower(ctx context.Context, id int32) (Follower, error) {
	row := q.db.QueryRowContext(ctx, deleteFollower, id)
	var i Follower
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LeaderID,
		&i.FollowerID,
	)
	return i, err
}

const deleteHashtag = `-- name: DeleteHashtag :one
DELETE FROM hashtags
WHERE id = $1
RETURNING id, created_at, title
`

func (q *Queries) DeleteHashtag(ctx context.Context, id int32) (Hashtag, error) {
	row := q.db.QueryRowContext(ctx, deleteHashtag, id)
	var i Hashtag
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Title)
	return i, err
}

const deleteLike = `-- name: DeleteLike :one
DELETE FROM likes
WHERE id = $1
RETURNING id, created_at, user_id, post_id, comment_id
`

func (q *Queries) DeleteLike(ctx context.Context, id int32) (Like, error) {
	row := q.db.QueryRowContext(ctx, deleteLike, id)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.PostID,
		&i.CommentID,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :one
DELETE FROM posts
WHERE id = $1
RETURNING id, created_at, updated_at, url, caption, lat, lng, user_id
`

func (q *Queries) DeletePost(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, deletePost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
		&i.Caption,
		&i.Lat,
		&i.Lng,
		&i.UserID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE id = $1
RETURNING id, created_at, updated_at, username, bio, avatar, email, password
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Bio,
		&i.Avatar,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getComment = `-- name: GetComment :one
SELECT id, created_at, updated_at, contents, user_id, post_id FROM comments
WHERE id = $1
`

func (q *Queries) GetComment(ctx context.Context, id int32) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Contents,
		&i.UserID,
		&i.PostID,
	)
	return i, err
}

const getFollower = `-- name: GetFollower :one
SELECT id, created_at, leader_id, follower_id FROM followers
WHERE id = $1
`

func (q *Queries) GetFollower(ctx context.Context, id int32) (Follower, error) {
	row := q.db.QueryRowContext(ctx, getFollower, id)
	var i Follower
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LeaderID,
		&i.FollowerID,
	)
	return i, err
}

const getHashtag = `-- name: GetHashtag :one
SELECT id, created_at, title FROM hashtags
WHERE title = $1
`

func (q *Queries) GetHashtag(ctx context.Context, title string) (Hashtag, error) {
	row := q.db.QueryRowContext(ctx, getHashtag, title)
	var i Hashtag
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Title)
	return i, err
}

const getPost = `-- name: GetPost :one
SELECT id, created_at, updated_at, url, caption, lat, lng, user_id FROM posts
WHERE id = $1
`

func (q *Queries) GetPost(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
		&i.Caption,
		&i.Lat,
		&i.Lng,
		&i.UserID,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, username, bio, avatar, email, password FROM users
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Bio,
		&i.Avatar,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const listComments = `-- name: ListComments :many
SELECT id, created_at, updated_at, contents, user_id, post_id FROM comments
ORDER BY id
`

func (q *Queries) ListComments(ctx context.Context) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Contents,
			&i.UserID,
			&i.PostID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFollowers = `-- name: ListFollowers :many
SELECT id, created_at, leader_id, follower_id FROM followers
ORDER BY id
`

func (q *Queries) ListFollowers(ctx context.Context) ([]Follower, error) {
	rows, err := q.db.QueryContext(ctx, listFollowers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Follower
	for rows.Next() {
		var i Follower
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.LeaderID,
			&i.FollowerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHashtags = `-- name: ListHashtags :many
SELECT id, created_at, title FROM hashtags
ORDER BY id
`

func (q *Queries) ListHashtags(ctx context.Context) ([]Hashtag, error) {
	rows, err := q.db.QueryContext(ctx, listHashtags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Hashtag
	for rows.Next() {
		var i Hashtag
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLikes = `-- name: ListLikes :many
SELECT id, created_at, user_id, post_id, comment_id FROM likes
ORDER BY id
`

func (q *Queries) ListLikes(ctx context.Context) ([]Like, error) {
	rows, err := q.db.QueryContext(ctx, listLikes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Like
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.PostID,
			&i.CommentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPosts = `-- name: ListPosts :many
SELECT id, created_at, updated_at, url, caption, lat, lng, user_id FROM posts
ORDER BY id
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
			&i.Caption,
			&i.Lat,
			&i.Lng,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, created_at, updated_at, username, bio, avatar, email, password FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.Bio,
			&i.Avatar,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET contents = $2
WHERE id = $1
RETURNING id, created_at, updated_at, contents, user_id, post_id
`

type UpdateCommentParams struct {
	ID       int32
	Contents string
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateComment, arg.ID, arg.Contents)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Contents,
		&i.UserID,
		&i.PostID,
	)
	return i, err
}

const updateHashtag = `-- name: UpdateHashtag :one
UPDATE hashtags
SET title = $2
WHERE id = $1
RETURNING id, created_at, title
`

type UpdateHashtagParams struct {
	ID    int32
	Title string
}

func (q *Queries) UpdateHashtag(ctx context.Context, arg UpdateHashtagParams) (Hashtag, error) {
	row := q.db.QueryRowContext(ctx, updateHashtag, arg.ID, arg.Title)
	var i Hashtag
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Title)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET url = $2, caption = $3
WHERE id = $1
RETURNING id, created_at, updated_at, url, caption, lat, lng, user_id
`

type UpdatePostParams struct {
	ID      int32
	Url     string
	Caption string
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost, arg.ID, arg.Url, arg.Caption)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
		&i.Caption,
		&i.Lat,
		&i.Lng,
		&i.UserID,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET bio = $2, avatar = $3
WHERE id = $1
RETURNING id, created_at, updated_at, username, bio, avatar, email, password
`

type UpdateUserParams struct {
	ID     int32
	Bio    string
	Avatar string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Bio, arg.Avatar)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Bio,
		&i.Avatar,
		&i.Email,
		&i.Password,
	)
	return i, err
}
